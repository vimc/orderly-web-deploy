vault:
  ## Address of the vault server.  This should be a string if it is
  ## present.
  addr: ~
  auth:
    ## Authentication type - must be either "token" or the name of a
    ## supported authentication method.  These seem to be poorly
    ## documented in the hvac, but include "github" for github
    ## authentication.
    ##
    ## On a vault client object, see auth.implemented_class_names for
    ## a list, which is currently
    ##
    ##     azure, github, gcp, kubernetes, ldap, mfa, okta
    method: token
    ## Arguments to the login method, as a set of key/value items.
    ## For token, use
    ##
    ## args:
    ##   token: <your token>
    ##
    ## For other methods see the login method - hvac's documentation
    ## unfortunately seems to be missing these entirely - one would
    ## assume that they'd be, say, here:
    ## https://hvac.readthedocs.io/en/stable/usage/auth_methods/github.html
    ##
    ## The docstring for each method hints at more, and there is the
    ## deprecated documentation here:
    ## https://hvac.readthedocs.io/en/stable/source/hvac_v1.html
    ##
    ## For github we require 'token'
    args:
      token: ~

## Prefix for container names; we'll use {container_prefix}-(orderly,web)
##
## This is an important configuration option because it cannot be
## overridden by a patch file or by passing options in.
##
## IMPORTANT: If you want to change the prefix, you should stop
## OrderlyWeb, then change the prefix, then start it back up.
## Otherwise OrderlyWeb will not take down the required containers
## before starting back up.
container_prefix: orderly-web

## The name of the docker network that containers will be attached to.
## If you want to proxy OrderlyWeb to the host, you will need to
## arrange a proxy on this network, or use dev_mode in the web section
## below.
network: orderly-web-network

## Names of the docker volumes to use:
##
## orderly: stores the orderly archive
## proxy_logs: stores logs from the reverse proxy (only used if proxy is given)
## css: stores compiled css for the web app (only needed if custom sass variables
## are given as sass_variables in web section below)
## documents: stores static documentation available through the web app
## outpack (optional): stores migrated outpack metadata. must exist if outpack config is set below.
##
## (More volumes are anticipated as the tool develops)
volumes:
  orderly: orderly_web_volume
  proxy_logs: orderly_web_proxy_logs
  css: orderly_web_css
  documents: orderly_web_documents
  redis: orderly_web_redis_data
  outpack: orderly_web_outpack

# Optional: to migrate the underlying orderly metadata to outpack metadata
outpack:
  repo: mrcide
  server:
    name: outpack_server
    tag: main
  migrate:
    name: outpack.orderly
    tag: main

# Optional: include Packit app
packit:
  repo: mrcide
  api:
    name: packit-api
    tag: main
  app:
    name: packit
    tag: mrc-4261
  db:
    name: packit-db
    tag: main

## Redis configuration
redis:
  image:
    name: redis
    tag: "5.0"
  volume: orderly_web_redis_data

## Orderly configuration
orderly:
  ## Image to use for orderly.  This should build off of
  ## vimc/orderly.server but can be extended to use whatever packages
  ## you need.  The components repo, image and tag will be assembled as
  ## <repo>/<name>:<tag> for the full docker image reference.
  image:
    repo: vimc
    name: orderly.server
    tag: master
    worker_name: orderly.server
  ## Environment variables that will be made available to orderly.
  ## Typically these will be in SHOUTY_SNAKE_CASE.  To pull values
  ## from the vault, use the format VAULT:<path>:<key>
  env:
    ORDERLY_DB_HOST: db_host
    ORDERLY_DB_USER: db_user
    ORDERLY_DB_PASS: VAULT:secret/db/password:value
  ## Path to ssh key for interacting with git; this will be set up at
  ## ~/.ssh in the orderly container so that pull and fetch work.  You
  ## might use a github deploy key here.  For completeness both the
  ## public and private parts of the keypair are listed.
  ssh:
    public: VAULT:secret/ssh:public
    private: VAULT:secret/ssh:private
  ## Initial data source for the orderly reports.  This section is
  ## optional - if not present, it is up to you to initialise the
  ## orderly volume (in the volumes section above) with appropriate
  ## data (if data is not present, orderly will not start).  This
  ## section only has an effect if the volume is empty.
  initial:
    ## Source must be one of "clone" or "demo"
    source: clone
    ## If source is "clone", then "url" must be given.  If using a
    ## private repo, then use an ssh url and provide ssh keys in the
    ## "ssh" section.
    url: https://github.com/reside-ic/orderly-example
  workers: 1

## Api and Website configuration
web:
  ## Image to use for the web components.  As for the orderly
  ## configuration these will be assembled as <repo>/<name>:<tag>.  In
  ## addition, a second image with the database migration support will
  ## be used as <repo>/<migrate>:<tag>. It is not expected (unlike
  ## the orderly image) that the 'name' and 'migrate' will need to be
  ## changed often, and it is expected that a web image will go
  ## together with corresponding migration and admin images. If custom sass
  ## variables are provided below as sass_variables, a third image
  ## for generating css is required.
  image:
    repo: vimc
    name: orderly-web
    tag: master
    migrate: orderlyweb-migrate
    admin: orderly-web-user-cli
    css-generator: orderly-web-css-generator
  ## Public-facing url for the whole web service, including protocol
  ## (ideally https://), hostname and port (if not using standard
  ## ports).  Here, we're going to use the same as for the proxy but
  ## if you are using an external proxy then you'd use its hostname
  ## and port.
  url: https://localhost
  ## If dev_mode is true then the port is exposed to the host (as
  ## plain http).  Do not use in production.  The port is attached
  ## only to the localhost and will not be available from other
  ## machines
  dev_mode: true
  ## Port to use for the web service
  port: 8888
  ## Name of the web service (affects the UI)
  name: OrderlyWeb
  ## Email address of the web service
  email: admin@example.com
  ## Authentication configuration
  auth:
    ## Name of the github organisation if using github auth
    github_org: vimc
    ## Name of the team within this github organisation if using
    ## github auth
    github_team: ""
    ## If using github auth you will need to register a github oauth app
    ## https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/
    ## The "Authorization callback URL" must be set to the public facing url
    ## that you configured above
    github_oauth:
      id: VAULT:secret/github/id:value
      secret: VAULT:secret/github/secret:value
    ## Enable or disable fine grained permissions
    fine_grained: false
    ## Enable montagu authentication provider
    montagu: false
    ## If using Montagu auth you also need the following
    montagu_url: http://localhost
    montagu_api_url: http://localhost:8080/v1
  ## Optional sass variables to override default styles. Should be a
  ## file path relative to the config file
  sass_variables: variables.scss
  ## Optional custom logo image, any valid image format. Should be a
  ## file path relative to the config file.
  logo: my-test-logo.png


# Optional: to notify a Slack channel during deployment, provide a webhook url
slack:
  webhook_url: VAULT:secret/slack/webhook:value

## If running a proxy directly, fill this section in.  Otherwise you
## are responsible for proxying the application out of the docker
## network
proxy:
  enabled: true
  ssl:
    ## This section describes how to get the certificate in.  We
    ## support two sources:
    ##
    ## 1. self signed certificates - just leave this section blank
    ##
    ## 2. certificates from strings - include the strings directly in
    ##    the keys here, or more likely use a VAULT:<path>:<key>
    ##    string to extract them from the vault.
    certificate: VAULT:secret/ssl/certificate:value
    key: VAULT:secret/ssl/key:value
  hostname: localhost
  port_http: 80
  port_https: 443
  image:
    repo: vimc
    name: orderly-web-proxy
    tag: master
